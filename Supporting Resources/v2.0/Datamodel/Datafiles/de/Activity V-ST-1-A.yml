---
#===========================================================
#OWASP SAMM Activity Description
#===========================================================
#Link to the stream that this activity belongs to
stream: 102fdab651834273abd67a3ec27aab05
#Link to the practice level that this activity belongs to
level: d6cefe3e63d149299fb088010c24778b
#Unique identifier (GUID) used to refer to this activity.
#Please generate another identifier for your specific activity.
id: 921ff24f0b9f4df9a5129aa2f8a4a570
#The title of this activity
title: Automatisierte Sicherheitstests durchführen
#Describe the benefit that is achieved by implementing this activity
benefit: Erkennung allgemeiner, leicht zu findender Sicherheitslücken
#A one sentence description of the activity
shortDescription: Einsatz automatisierter Sicherheitstests
#A multi-paragraph description of the activity
longDescription: |
  Use automated static and dynamic security test tools for software, resulting in more efficient security testing and higher quality results. Progressively increase the frequency of security tests and extend code coverage.

  Application security testing can be performed statically, by inspecting an application's source code without running it, or dynamically by simply observing the application's behavior in response to various input conditions. The former approach is often referred to as Static Application Security Testing (SAST), the latter as Dynamic Application Security Testing (DAST). A hybrid approach, known as Interactive Application Security Testing (IAST), combines the strengths of both approaches (at the cost of additional overhead) by dynamically testing automatically instrumented applications, allowing accurate monitoring of the application's internal state in response to external input.

  Many security vulnerabilties are very hard to detect without carefully inspecting the source code. While this is ideally performed by expert or peer review, it is a slow and expensive task. Although "noisier" and frequently less accurate than expert-led reviews, automated SAST tools are cheaper, much faster, and more consistent than humans. A number of commercial and free tools are able to efficiently detect sufficiently important bugs and vulnerabilities in large code bases.

  Dynamic testing does not require application source code, making it ideal for cases where source code is not available. It also identifies concrete instances of vulnerabilities. Due to its "black-box" approach , without instrumentation, it is more likely to uncover shallow bugs. Dynamic testing tools need a large source of test data whose manual test generation is prohibitive. Many tools exist which generate suitable test data automatically, leading to more efficient security testing and higher quality results.

  Select appropriate tools based on several factors, including depth and accuracy of inspection, robustness and accuracy of security test cases, available integrations with other tools, usage and cost model, etc. When selecting tools, use input from security-savvy technical staff as well as developers and development managers and review results with stakeholders.
#The output of this particular activity
results:
#The different metrics that can be used to measure the success of the activity
metrics:
#A description of the costs required to implement the activity
costs:
#The (standard) roles involved in the implementation of this activity
personnel:
#Internal notes that might help the author
notes:
#References to other activities that are prerequesites to implement this one.
dependencies:
#Type Classification of the Document
type: Activity
